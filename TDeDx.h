#ifndef TDeDx_h
#define TDeDx_h

#include <TMath.h>

//**************************************************//
//	TDeDx calculates the energy loss of the beam
//	in the target. It is based on the elast.c code, 
//	produced at Oakridge and based on the 
//	Ziegler tables.	It has been slimmed down and
//	modified to fit with the rest of the code.
//**************************************************//
class TDeDx {

	public :

		TDeDx(){;} 
		virtual ~TDeDx(){;}

		Int_t Proj_A;
		Int_t Proj_Z;
		Int_t Tar_A;
		Int_t Tar_Z;

		void SetNuclei(Int_t PA, Int_t PZ, Int_t TA, Int_t TZ)
		{
			Proj_A = PA;
			Proj_Z = PZ;
			Tar_A = TA;
			Tar_Z = TZ;
		}

		Double_t IncidentEnergy;
		void SetIncidentEnergy(Double_t Ebeam) { IncidentEnergy = Ebeam; }

		Double_t TargetThickness; // mg/cm2
		void SetTargetThickness(Double_t thickness) { TargetThickness = thickness; }
	

		Double_t DeltaE(Double_t Energy);

		Double_t EnergyLoss();

};
#endif

#ifdef TDeDx_cxx

Double_t TDeDx::EnergyLoss()
{

	Double_t Energy = IncidentEnergy;

	Double_t dEdX = DeltaE(Energy);
	Double_t dX = 0.1/dEdX;

	Double_t Position = 0; // Position in the target

	while((TargetThickness - Position - dX) >= 0)
	{
		Position = Position + dX;
		dEdX = DeltaE(Energy);
		Energy = Energy - (TargetThickness - Position)*dEdX;
	}

	return IncidentEnergy - Energy;
}

Double_t TDeDx::DeltaE(Double_t Energy)
{

	/*Double_t M_El[113] =
	{
		1.008665,  /* Neutron 
		1.00797,	4.0026,   	6.939,    	9.0122,   	10.818,
		12.01115,  	14.0067,  	15.9994,  	18.99984,  	20.183,
		22.9898,   	24.312,   	26.9815,  	28.086,    	30.9738,
		32.064,     35.453,  	39.948,   	39.102,    	40.08,
		44.956,     47.90,   	50.942,   	51.996,    	54.938,
		55.847,     58.933,  	58.71,    	63.54,     	65.37,
		69.72,      72.59,   	74.922,  	78.96,     	79.909,
		83.80,      85.47,   	87.62,    	88.909,    	91.22,
		92.906,     95.94,   	98.,     	101.07,    	102.905,
		106.4,      107.87,  	112.4,    	114.82,    	118.69,
		121.75,     127.60,  	126.904,  	131.3,     	132.905,
		137.34,     138.91,  	140.12,   	140.907,   	144.24,
		146.,       150.35,  	151.96,   	157.25,   	158.924,
		162.50,     164.93,  	167.26,   	168.934,   	173.04,
		174.97,     178.49,  	180.948,  	183.85,     186.2,
		190.2,      192.2,   	195.09,   	196.967,    200.59,
		204.37,     207.19,  	208.98,   	209.,       210.,
		222.,       223.,    	226.,     	227.,       232.038,
		231.,       238.03,  	237.,     	242.,       243.,
		247.,       247.,    	249.,     	254.,       253.,
		256.,       254.,    	259.,     	257.,       260. 
	};*/

	Double_t H_SGM[93][7] =
	{       
		{ 0.0 },   /* neutron, illegal! */
		{ 1.262, 1.440, 242.6, 12000.0, 0.115900, 0.000510, 54360.0 },
		{ 1.229, 1.397, 484.5, 5873.0, 0.052250, 0.001020, 24510.0 },
		{ 1.411, 1.600, 725.6, 3013.0, 0.045780, 0.001530, 21470.0 },
		{ 2.248, 2.590, 966.0, 153.8, 0.034750, 0.002039, 16300.0 },
		{ 2.474, 2.815, 1206.0, 1060.0, 0.028550, 0.002549, 13450.0 },
		{ 2.631, 2.989, 1445.0, 957.2, 0.028190, 0.003059, 13220.0 },
		{ 2.954, 3.350, 1683.0, 1900.0, 0.025130, 0.003569, 11790.0 },
		{ 2.652, 3.000, 1920.0, 2000.0, 0.022300, 0.004079, 10460.0 },
		{ 2.085, 2.352, 2157.0, 2634.0, 0.018160, 0.004589, 8517.0 },
		{ 1.951, 2.199, 2393.0, 2699.0, 0.015680, 0.005099, 7353.0 },
		{ 2.542, 2.869, 2628.0, 1854.0, 0.014720, 0.005609, 6905.0 },
		{ 3.792, 4.293, 2862.0, 1009.0, 0.013970, 0.006118, 6551.0 },
		{ 4.154, 4.739, 2766.0, 164.5, 0.020230, 0.006628, 6309.0 },
		{ 4.150, 4.700, 3329.0, 550.0, 0.013210, 0.007138, 6194.0 },
		{ 3.232, 3.647, 3561.0, 1560.0, 0.012670, 0.007648, 5942.0 },
		{ 3.447, 3.891, 3792.0, 1219.0, 0.012110, 0.008158, 5678.0 },
		{ 5.047, 5.714, 4023.0, 878.6, 0.011780, 0.008668, 5524.0 },
		{ 5.731, 6.500, 4253.0, 530.0, 0.011230, 0.009178, 5268.0 },
		{ 5.151, 5.833, 4482.0, 545.7, 0.011290, 0.009687, 5295.0 },
		{ 5.521, 6.252, 4710.0, 553.3, 0.011120, 0.010200, 5214.0 },
		{ 5.201, 5.884, 4938.0, 560.9, 0.009995, 0.010710, 4688.0 },
		{ 4.862, 5.496, 5165.0, 568.5, 0.009474, 0.011220, 4443.0 },
		{ 4.480, 5.055, 5391.0, 952.3, 0.009117, 0.011730, 4276.0 },
		{ 3.983, 4.489, 5616.0, 1336.0, 0.008413, 0.012240, 3946.0 },
		{ 3.469, 3.907, 5725.0, 1461.0, 0.008829, 0.012750, 3785.0 },
		{ 3.519, 3.963, 6065.0, 1243.0, 0.007782, 0.013260, 3650.0 },
		{ 3.140, 3.535, 6288.0, 1372.0, 0.007361, 0.013770, 3453.0 },
		{ 3.553, 4.004, 6205.0, 555.1, 0.008763, 0.014280, 3297.0 },
		{ 3.696, 4.175, 4673.0, 387.8, 0.021880, 0.014790, 3174.0 },
		{ 4.210, 4.750, 6953.0, 295.2, 0.006809, 0.015300, 3194.0 },
		{ 5.041, 5.697, 7173.0, 202.6, 0.006725, 0.015810, 3154.0 },
		{ 5.554, 6.300, 6496.0, 110.0, 0.009689, 0.016320, 3097.0 },
		{ 5.323, 6.012, 7611.0, 292.5, 0.006447, 0.016830, 3024.0 },
		{ 5.874, 6.656, 7395.0, 117.5, 0.007684, 0.017340, 3006.0 },
		{ 5.611, 6.335, 8046.0, 365.2, 0.006244, 0.017850, 2928.0 },
		{ 6.411, 7.250, 8262.0, 220.0, 0.006087, 0.018360, 2855.0 },
		{ 5.694, 6.429, 8478.0, 292.9, 0.006087, 0.018860, 2855.0 },
		{ 6.339, 7.159, 8693.0, 330.3, 0.006003, 0.019370, 2815.0 },
		{ 6.407, 7.234, 8907.0, 367.8, 0.005889, 0.019880, 2762.0 },
		{ 6.734, 7.603, 9120.0, 405.2, 0.005765, 0.020390, 2700.0 },
		{ 6.902, 7.791, 9333.0, 442.7, 0.005587, 0.020900, 2621.0 },
		{ 6.425, 7.248, 9545.0, 480.2, 0.005367, 0.021410, 2517.0 },
		{ 6.799, 7.671, 9756.0, 517.6, 0.005315, 0.021920, 2493.0 },
		{ 6.108, 6.887, 9966.0, 555.1, 0.005151, 0.022430, 2416.0 },
		{ 5.924, 6.677, 10180.0, 592.5, 0.004919, 0.022940, 2307.0 },
		{ 5.238, 5.900, 10380.0, 630.0, 0.004758, 0.023450, 2231.0 },
		{ 5.623, 6.354, 7160.0, 337.6, 0.013940, 0.023960, 2193.0 },
		{ 5.814, 6.554, 10800.0, 355.5, 0.004626, 0.024470, 2170.0 },
		{ 6.230, 7.024, 11010.0, 370.9, 0.004540, 0.024980, 2129.0 },
		{ 6.410, 7.227, 11210.0, 386.4, 0.004474, 0.025490, 2099.0 },
		{ 7.500, 8.480, 8608.0, 348.0, 0.009074, 0.026000, 2069.0 },
		{ 6.979, 7.871, 11620.0, 392.4, 0.004402, 0.026510, 2065.0 },
		{ 7.725, 8.716, 11830.0, 394.8, 0.004376, 0.027020, 2052.0 },
		{ 8.231, 9.289, 12030.0, 397.3, 0.004384, 0.027530, 2056.0 },
		{ 7.287, 8.218, 12230.0, 399.7, 0.004447, 0.028040, 2086.0 },
		{ 7.899, 8.911, 12430.0, 402.1, 0.004511, 0.028550, 2116.0 },
		{ 8.041, 9.071, 12630.0, 404.5, 0.004540, 0.029060, 2129.0 },
		{ 7.489, 8.444, 12830.0, 406.9, 0.004420, 0.029570, 2073.0 },
		{ 7.291, 8.219, 13030.0, 409.3, 0.004298, 0.030080, 2016.0 },
		{ 7.098, 8.000, 13230.0, 411.8, 0.004182, 0.030590, 1962.0 },
		{ 6.910, 7.786, 13430.0, 414.2, 0.004058, 0.031100, 1903.0 },
		{ 6.728, 7.580, 13620.0, 416.6, 0.003976, 0.031610, 1865.0 },
		{ 6.551, 7.380, 13820.0, 419.0, 0.003877, 0.032120, 1819.0 },
		{ 6.739, 7.592, 14020.0, 421.4, 0.003863, 0.032630, 1812.0 },
		{ 6.212, 7.996, 14210.0, 423.9, 0.003725, 0.033140, 1747.0 },
		{ 5.517, 6.210, 14440.0, 426.3, 0.003632, 0.033650, 1703.0 },
		{ 5.219, 5.874, 14600.0, 428.7, 0.003498, 0.034160, 1640.0 },
		{ 5.071, 5.706, 14790.0, 433.0, 0.003405, 0.034670, 1597.0 },
		{ 4.926, 5.542, 14980.0, 433.5, 0.003342, 0.035180, 1567.0 },
		{ 4.787, 5.386, 15170.0, 435.9, 0.003292, 0.035690, 1544.0 },
		{ 4.893, 5.505, 15360.0, 438.4, 0.003243, 0.036200, 1521.0 },
		{ 5.028, 5.657, 15550.0, 440.8, 0.003195, 0.036710, 1499.0 },
		{ 4.738, 5.329, 15740.0, 443.2, 0.003186, 0.037220, 1494.0 },
		{ 4.574, 5.144, 15930.0, 442.4, 0.003144, 0.037730, 1475.0 },
		{ 5.200, 5.851, 16120.0, 441.6, 0.003122, 0.038240, 1464.0 },
		{ 5.070, 5.704, 16300.0, 440.9, 0.003082, 0.038750, 1446.0 },
		{ 4.945, 5.563, 16490.0, 440.1, 0.002965, 0.039260, 1390.0 },
		{ 4.476, 5.034, 16670.0, 439.3, 0.002871, 0.039770, 1347.0 },
		{ 4.856, 5.460, 18320.0, 438.5, 0.002542, 0.040280, 1354.0 },
		{ 4.308, 4.843, 17040.0, 487.8, 0.002882, 0.040790, 1352.0 },
		{ 4.723, 5.311, 17220.0, 537.0, 0.002913, 0.041300, 1366.0 },
		{ 5.319, 5.982, 17400.0, 586.3, 0.002871, 0.041810, 1347.0 },
		{ 5.956, 6.700, 17800.0, 677.0, 0.002660, 0.042320, 1336.0 },
		{ 6.158, 6.928, 17770.0, 586.3, 0.002813, 0.042830, 1319.0 },
		{ 6.204, 6.979, 17950.0, 586.3, 0.002776, 0.043340, 1302.0 },
		{ 6.181, 6.954, 18120.0, 586.3, 0.002748, 0.043850, 1289.0 },
		{ 6.949, 7.820, 18300.0, 586.3, 0.002737, 0.044360, 1284.0 },
		{ 7.506, 8.448, 18480.0, 586.3, 0.002727, 0.044870, 1279.0 },
		{ 7.649, 8.609, 18660.0, 586.3, 0.002697, 0.045380, 1265.0 },
		{ 7.710, 8.679, 18830.0, 586.3, 0.002641, 0.045890, 1239.0 },
		{ 7.407, 8.336, 19010.0, 586.3, 0.002603, 0.046400, 1221.0 },
		{ 7.290, 8.204, 19180.0, 586.3, 0.002573, 0.046910, 1207.0 } 
	};

	Double_t SC[93] =
	{ 
		-1.0, /* Neutrons don't form Atoms */
		4, -3, -9, -8, -7, -9, -6, -9, -10, -11, 
		-8.067042, -7.656943, -7.334811, -7.090362, -6.913403, -6.793886,
		-6.721960, -6.688023, -6.682777, -6.697280, -6.722998, -6.751858,
		-6.776303, -6.789341, -6.784602, -6.756387, -6.699725, -6.610422,
		-6.485116, -6.321330, -6.117522, -5.873143, -5.588685, -5.265737,
		-4.907035, -4.516517, -4.099378, -3.662116, -3.212592, -2.760080,
		-2.315318, -1.890563, -1.499646, -1.158019, -0.882813, -0.692889,
		-0.608892, -0.653300, -0.850483, -1.226750, -1.384801, -1.304977,
		-1.214567, -1.122112, -1.034512, -0.957128, -0.893885, -0.847380,
		-0.818980, -0.808928, -0.816450, -0.839853, -0.876634, -0.923581,
		-0.976877, -1.032203, -1.084846, -1.129797, -1.161858, -1.175746,
		-1.166195, -1.128060, -1.056425, -0.946699, -0.794727, -0.596889,
		-0.350208, -0.052448,  0.297775,  0.700896,  1.156293,  1.662186,
		2.215528,  2.811910,  3.445449,  4.108687,  4.792490,  5.485939,
		6.176233,  6.848578,  7.486087,  8.069677 
	};

	//****************************//
	//	Convert to Si units
	//****************************//
	Double_t Euler = 2.718281828;
	Double_t E_Joules = Energy * 1.602e-19 * 1e6;
	Double_t Proj_Mass = Proj_A * 1.660540e-27;
	Double_t c = 2.99792458e8;
	Double_t VsQ = 1 - ( 1 / ( pow(E_Joules,2) / ( pow(Proj_Mass,2) * pow(c,2) )));
	Double_t beta = TMath::Sqrt(VsQ);
	VsQ = Energy / Proj_A;

	Double_t VEff = 0.073 * pow(Proj_Z,(2/3));

	Double_t Fac = 0.60225 / Tar_A;

	Int_t M = Tar_A + Proj_A;
	Double_t Z = TMath::Sqrt(pow(Proj_Z,(2/3)) + pow(Tar_Z,(2/3)));
	Double_t EPS = Energy * 32520 * (Tar_A / M) / (Proj_Z * Tar_Z * Z);

	Double_t dEEl;
	if(EPS < 0.01)
		dEEl = 1.593 * TMath::Sqrt(EPS);
	else if(EPS > 10)
		dEEl = 0.5 * TMath::Log(0.47 * EPS) / EPS;
	else
		dEEl = 1.7 * TMath::Sqrt(EPS) * TMath::Log(EPS + Euler) / (1 + 6.8 * EPS + 3.4 * pow(EPS,1.5) );

	dEEl = dEEl * 8.462 * (Proj_Z * Tar_Z / Z) * (Proj_A / M) * Fac;

	Double_t dEdXN = dEEl;
	
	Double_t E = 1000 * VsQ;

	if(E > 1000)
		dEEl = Fac * H_SGM[Tar_Z][5] / pow(beta,2) * TMath::Log(H_SGM[Tar_Z][6] * pow(beta,2) / (1 - pow(beta,2))) + SC[Tar_Z] / E;
	else if(E < 10)
		dEEl = Fac * H_SGM[Tar_Z][0] * TMath::Sqrt(E);
	else
		dEEl = Fac / ( 1.0 / (H_SGM[Tar_Z][1] * pow(E,0.45)) + E / H_SGM[Tar_Z][2] / TMath::Log(1.0 + H_SGM[Tar_Z][3]/E + H_SGM[Tar_Z][4] * E) );

	Double_t B = (0.1772 * TMath::Sqrt(E)) / pow(Proj_Z,(2/3));
	Double_t G = Proj_Z * (1.0 - (1.034 - 0.1777 / TMath::Exp(0.08114 * Proj_Z)) / TMath::Exp(B + 0.0378 * TMath::Sin(1.5708 * B)));

	if(G<1)
		G=1;

	dEEl = pow(G,2) * dEEl;

	Double_t dEdXE = dEEl;

	if((dEdXN + dEdXE) < 1e-30)
		return 1e-30;
	else
		return (dEdXN + dEdXE);

}


#endif
